#!/usr/bin/env python3
import requests
import sys
import argparse
import signal
from concurrent.futures import ThreadPoolExecutor
from colorama import Fore, Style, init
init(autoreset=True)

def signal_handler(sig, frame):
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
parser = argparse.ArgumentParser(description="Directory and subdomain enumeration tool")
parser.add_argument("-s", action="store_true", help="Enable subdomain enumeration")
parser.add_argument("-dir", action="store_true", help="Enable directory enumeration")
parser.add_argument("-u", type=str, required=True, help="Target URL or domain")
parser.add_argument("-w", type=str, required=True, help="Path to wordlist file")
args = parser.parse_args()

with open(args.w, 'r') as f:
    words = [line.strip() for line in f if line.strip()]

def clean_domain(url):
    if url.startswith("http://"):
        url = url[7:]
    elif url.startswith("https://"):
        url = url[8:]
    return url.strip('/')

def print_result(code, msg):
    if code == 200:
        print(Fore.GREEN + f"[{code}] {msg}")
    elif code == 401:
        print(Fore.YELLOW + f"[{code}] {msg}")

def directory_enum(domain):
    def fetch(word):
        full_url = f"http://{domain}/{word}"
        try:
            response = requests.get(full_url, timeout=2)
            code = response.status_code
            if code in [200, 401]:
                print_result(code, f"Directory: {full_url}")
        except requests.RequestException:
            pass
    
    with ThreadPoolExecutor(max_workers=20) as executor:
        executor.map(fetch, words)

def subdomain_enum(domain):
    def fetch(word):
        sub = f"{word}.{domain}"
        url = f"http://{sub}"
        try:
            response = requests.get(url, timeout=2)
            code = response.status_code
            if code in [200, 401]:
                print_result(code, f"Subdomain: {url}")
        except requests.RequestException:
            pass
    
    with ThreadPoolExecutor(max_workers=20) as executor:
        executor.map(fetch, words)

print(Fore.RED + Style.BRIGHT + """

                            ___====-_  _-====___
                      _--^^^#####//      \\#####^^^--_
                   _-^##########// (    ) \\##########^-_
                  -############//  |\^^/|  \\############-
                _/############//   (@::@)   \\############\_
               /#############((     \\//     ))#############
              -###############\\    (oo)    //###############-
             -#################\\  / VV \  //#################-
            -###################\\/      \//###################-
           _#/|##########/\######(   /\   )######/\##########|\#_
           |/ |#/\#/\#/\/  \#/\##\  |  |  /##/\#/  \/\#/\#/\#| \|
           `  |/  V  V  `   V  \#\| |  | |/#/  V   '  V  V  \|  '
              `   `  `      `   / | |  | | \   '      '  '   '
                               (  | |  | |  )
                              __\ | |  | | /__
                             (vvv(VVV)(VVV)vvv)
      
            ▓█████  ███▄    █  █    ██  ███▄ ▄███▓      ██   ██ 
            ▓█   ▀  ██ ▀█   █  ██  ▓██▒ ▓██▒▀█▀ ██▒      ▀██▄██▀ 
            ▒███   ▓██  ▀█ ██▒▓██  ▒██░ ▓██    ▓██░        ████   
            ▒▓█  ▄ ▓██▒  ▐▌██▒▓▓█  ░██░ ▒██    ▒██       ▄██▀██▄  
            ░▒████▒▒██░   ▓██░▒▒█████▓  ▒██▒   ░██▒      ██▀  ▀██ 
            ░░ ▒░ ░░ ▒░   ▒ ▒ ░▒▓▒ ▒ ▒  ░ ▒░   ░  ░               
            ░ ░  ░░ ░░   ░ ▒░░░▒░ ░ ░  ░  ░      ░               
                ░      ░   ░ ░  ░░░ ░ ░  ░      ░                  
                ░  ░         ░    ░             ░                  

                    ~ THE DIRECTORY SLAYING DRAGON ~
                    ~ BURNING THROUGH SUBDOMAINS ~

\n
""")
cleaned = clean_domain(args.u)
if args.dir:
    directory_enum(cleaned)
if args.s:
    subdomain_enum(cleaned)